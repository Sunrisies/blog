version: '3'
services:
  nest:
    build:
      context: .
      dockerfile: Dockerfile # 指向你的Nest.js应用程序的Dockerfile
    # image: nest-blog-nest:latest # 指向你的Nest.js应用程序的镜像
    ports:
      - "3001:80" # 将容器的3000端口映射到宿主机的3000端口
    depends_on:
      - mysql # 确保mysql服务先启动
    environment:
      - NODE_ENV=production # 设置环境变量
      - DB_HOST=mysql # Nest.js应用程序连接到名为mysql的容器的MySQL实例
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=123456
      - DB_NAME=test # 假设你的Nest.js应用程序将使用这个数据库名

  mysql:
    image: mysql:8.3.0
    container_name: nest-mysql
    ports:
      - '3306:3306' # 将容器的3306端口映射到宿主机的9906端口（可选，通常只在需要直接访问数据库时才需要）
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: nest_blog # 在容器启动时创建一个名为test_blog的数据库
    volumes:
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql # 挂载自定义的SQL脚本来初始化数据库
      - ./mysql-data:/var/lib/mysql # 持久化MySQL数据到宿主机

  redis:
    image: redis:latest # 使用官方的 Redis 镜像
    container_name: nest-redis # 设置容器名（可选）
    ports:
      - '6379:6379' # 将容器的 6379 端口映射到主机的 6379 端口
    volumes:
      - ./redis-data:/data # 将主机的 redis-data 目录映射到容器的 /data 目录，用于持久化数据（可选）
    command: redis-server --appendonly yes # 使用 appendonly 模式来持久化数据（可选）
